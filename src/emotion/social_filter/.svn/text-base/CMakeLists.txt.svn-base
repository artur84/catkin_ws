cmake_minimum_required(VERSION 2.4.6)
include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)

# Set the build type.  Options are:
#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage
#  Debug          : w/ debug symbols, w/o optimization
#  Release        : w/o debug symbols, w/ optimization
#  RelWithDebInfo : w/ debug symbols, w/ optimization
#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries
#set(ROS_BUILD_TYPE RelWithDebInfo)

rosbuild_init()

#set the default path for built executables to the "bin" directory
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
#set the default path for built libraries to the "lib" directory
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

#uncomment if you have defined messages
rosbuild_genmsg()
#uncomment if you have defined services
#rosbuild_gensrv()

#common commands for building c++ executables and libraries
#rosbuild_add_library(${PROJECT_NAME} src/example.cpp)
#target_link_libraries(${PROJECT_NAME} another_library)
#rosbuild_add_boost_directories()
#rosbuild_link_boost(${PROJECT_NAME} thread)
#rosbuild_add_executable(example examples/example.cpp)
#target_link_libraries(example ${PROJECT_NAME})

rosbuild_add_library(social_fcns src/social_fcns.cpp)

rosbuild_add_executable(human_proc  src/human_proc.cpp)

rosbuild_add_executable(fform_detect src/fform_detect.cpp)
target_link_libraries(fform_detect social_fcns)

rosbuild_add_executable(human_markers src/human_markers.cpp)
target_link_libraries(human_markers social_fcns)
rosbuild_add_executable(kinect_human_proc src/kinect_human_proc.cpp)

target_link_libraries(fform_detect social_fcns)


rosbuild_find_ros_package(ghmm)
include_directories (${ghmm_PACKAGE_PATH}/src/)
link_directories(${ghmm_PACKAGE_PATH}/lib/)
rosbuild_add_executable(human_grids src/HumanGridRos.cpp)
target_link_libraries(human_grids social_fcns GridPublisher)


