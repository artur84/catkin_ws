/* Auto-generated by genmsg_cpp for file /home/arturo/ros_works/roswheelchair/trunk/ros/stacks/inria_wheelchair/social_filter/msg/int_data.msg */
#ifndef SOCIAL_FILTER_MESSAGE_INT_DATA_H
#define SOCIAL_FILTER_MESSAGE_INT_DATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace social_filter
{
template <class ContainerAllocator>
struct int_data_ {
  typedef int_data_<ContainerAllocator> Type;

  int_data_()
  : type(0)
  , id_members()
  , media_x(0.0)
  , media_y(0.0)
  , sd_x(0.0)
  , sd_y(0.0)
  , angle(0.0)
  , meet_points()
  {
  }

  int_data_(const ContainerAllocator& _alloc)
  : type(0)
  , id_members(_alloc)
  , media_x(0.0)
  , media_y(0.0)
  , sd_x(0.0)
  , sd_y(0.0)
  , angle(0.0)
  , meet_points(_alloc)
  {
  }

  typedef uint8_t _type_type;
  uint8_t type;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _id_members_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  id_members;

  typedef float _media_x_type;
  float media_x;

  typedef float _media_y_type;
  float media_y;

  typedef float _sd_x_type;
  float sd_x;

  typedef float _sd_y_type;
  float sd_y;

  typedef float _angle_type;
  float angle;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _meet_points_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  meet_points;


  typedef boost::shared_ptr< ::social_filter::int_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::social_filter::int_data_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct int_data
typedef  ::social_filter::int_data_<std::allocator<void> > int_data;

typedef boost::shared_ptr< ::social_filter::int_data> int_dataPtr;
typedef boost::shared_ptr< ::social_filter::int_data const> int_dataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::social_filter::int_data_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::social_filter::int_data_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace social_filter

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::social_filter::int_data_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::social_filter::int_data_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::social_filter::int_data_<ContainerAllocator> > {
  static const char* value() 
  {
    return "26b7c9c764058b2cf8750f36b3a55953";
  }

  static const char* value(const  ::social_filter::int_data_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x26b7c9c764058b2cULL;
  static const uint64_t static_value2 = 0xf8750f36b3a55953ULL;
};

template<class ContainerAllocator>
struct DataType< ::social_filter::int_data_<ContainerAllocator> > {
  static const char* value() 
  {
    return "social_filter/int_data";
  }

  static const char* value(const  ::social_filter::int_data_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::social_filter::int_data_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 type\n\
uint8[] id_members\n\
float32 media_x\n\
float32 media_y\n\
float32 sd_x\n\
float32 sd_y\n\
float32 angle\n\
float32[] meet_points\n\
 \n\
\n\
";
  }

  static const char* value(const  ::social_filter::int_data_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::social_filter::int_data_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.type);
    stream.next(m.id_members);
    stream.next(m.media_x);
    stream.next(m.media_y);
    stream.next(m.sd_x);
    stream.next(m.sd_y);
    stream.next(m.angle);
    stream.next(m.meet_points);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct int_data_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::social_filter::int_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::social_filter::int_data_<ContainerAllocator> & v) 
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "id_members[]" << std::endl;
    for (size_t i = 0; i < v.id_members.size(); ++i)
    {
      s << indent << "  id_members[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.id_members[i]);
    }
    s << indent << "media_x: ";
    Printer<float>::stream(s, indent + "  ", v.media_x);
    s << indent << "media_y: ";
    Printer<float>::stream(s, indent + "  ", v.media_y);
    s << indent << "sd_x: ";
    Printer<float>::stream(s, indent + "  ", v.sd_x);
    s << indent << "sd_y: ";
    Printer<float>::stream(s, indent + "  ", v.sd_y);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
    s << indent << "meet_points[]" << std::endl;
    for (size_t i = 0; i < v.meet_points.size(); ++i)
    {
      s << indent << "  meet_points[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.meet_points[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // SOCIAL_FILTER_MESSAGE_INT_DATA_H

