/* Auto-generated by genmsg_cpp for file /home/artur/ros_works/roswheelchair/trunk/ros/stacks/inria_wheelchair/social_filter/msg/humanSocialSpace.msg */
#ifndef SOCIAL_FILTER_MESSAGE_HUMANSOCIALSPACE_H
#define SOCIAL_FILTER_MESSAGE_HUMANSOCIALSPACE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace social_filter
{
template <class ContainerAllocator>
struct humanSocialSpace_ {
  typedef humanSocialSpace_<ContainerAllocator> Type;

  humanSocialSpace_()
  : header()
  , id(0)
  , human_id(0)
  , size(0.0)
  , sigma_h(0.0)
  , sigma_r(0.0)
  , sigma_s(0.0)
  , attractiveness(0)
  {
  }

  humanSocialSpace_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , id(0)
  , human_id(0)
  , size(0.0)
  , sigma_h(0.0)
  , sigma_r(0.0)
  , sigma_s(0.0)
  , attractiveness(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef int32_t _id_type;
  int32_t id;

  typedef int32_t _human_id_type;
  int32_t human_id;

  typedef float _size_type;
  float size;

  typedef float _sigma_h_type;
  float sigma_h;

  typedef float _sigma_r_type;
  float sigma_r;

  typedef float _sigma_s_type;
  float sigma_s;

  typedef int32_t _attractiveness_type;
  int32_t attractiveness;


  typedef boost::shared_ptr< ::social_filter::humanSocialSpace_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::social_filter::humanSocialSpace_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct humanSocialSpace
typedef  ::social_filter::humanSocialSpace_<std::allocator<void> > humanSocialSpace;

typedef boost::shared_ptr< ::social_filter::humanSocialSpace> humanSocialSpacePtr;
typedef boost::shared_ptr< ::social_filter::humanSocialSpace const> humanSocialSpaceConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::social_filter::humanSocialSpace_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::social_filter::humanSocialSpace_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace social_filter

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::social_filter::humanSocialSpace_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::social_filter::humanSocialSpace_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::social_filter::humanSocialSpace_<ContainerAllocator> > {
  static const char* value() 
  {
    return "69492c24f08da63cba4bfedf7601f9af";
  }

  static const char* value(const  ::social_filter::humanSocialSpace_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x69492c24f08da63cULL;
  static const uint64_t static_value2 = 0xba4bfedf7601f9afULL;
};

template<class ContainerAllocator>
struct DataType< ::social_filter::humanSocialSpace_<ContainerAllocator> > {
  static const char* value() 
  {
    return "social_filter/humanSocialSpace";
  }

  static const char* value(const  ::social_filter::humanSocialSpace_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::social_filter::humanSocialSpace_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
\n\
int32 id\n\
int32 human_id\n\
float32 size\n\
float32 sigma_h\n\
float32 sigma_r\n\
float32 sigma_s\n\
int32   attractiveness\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::social_filter::humanSocialSpace_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::social_filter::humanSocialSpace_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::social_filter::humanSocialSpace_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::social_filter::humanSocialSpace_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.id);
    stream.next(m.human_id);
    stream.next(m.size);
    stream.next(m.sigma_h);
    stream.next(m.sigma_r);
    stream.next(m.sigma_s);
    stream.next(m.attractiveness);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct humanSocialSpace_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::social_filter::humanSocialSpace_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::social_filter::humanSocialSpace_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "human_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.human_id);
    s << indent << "size: ";
    Printer<float>::stream(s, indent + "  ", v.size);
    s << indent << "sigma_h: ";
    Printer<float>::stream(s, indent + "  ", v.sigma_h);
    s << indent << "sigma_r: ";
    Printer<float>::stream(s, indent + "  ", v.sigma_r);
    s << indent << "sigma_s: ";
    Printer<float>::stream(s, indent + "  ", v.sigma_s);
    s << indent << "attractiveness: ";
    Printer<int32_t>::stream(s, indent + "  ", v.attractiveness);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SOCIAL_FILTER_MESSAGE_HUMANSOCIALSPACE_H

