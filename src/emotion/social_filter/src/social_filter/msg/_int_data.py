"""autogenerated by genpy from social_filter/int_data.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class int_data(genpy.Message):
  _md5sum = "26b7c9c764058b2cf8750f36b3a55953"
  _type = "social_filter/int_data"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 type
uint8[] id_members
float32 media_x
float32 media_y
float32 sd_x
float32 sd_y
float32 angle
float32[] meet_points
 

"""
  __slots__ = ['type','id_members','media_x','media_y','sd_x','sd_y','angle','meet_points']
  _slot_types = ['uint8','uint8[]','float32','float32','float32','float32','float32','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,id_members,media_x,media_y,sd_x,sd_y,angle,meet_points

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(int_data, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = 0
      if self.id_members is None:
        self.id_members = ''
      if self.media_x is None:
        self.media_x = 0.
      if self.media_y is None:
        self.media_y = 0.
      if self.sd_x is None:
        self.sd_x = 0.
      if self.sd_y is None:
        self.sd_y = 0.
      if self.angle is None:
        self.angle = 0.
      if self.meet_points is None:
        self.meet_points = []
    else:
      self.type = 0
      self.id_members = ''
      self.media_x = 0.
      self.media_y = 0.
      self.sd_x = 0.
      self.sd_y = 0.
      self.angle = 0.
      self.meet_points = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.type))
      _x = self.id_members
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5f.pack(_x.media_x, _x.media_y, _x.sd_x, _x.sd_y, _x.angle))
      length = len(self.meet_points)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.meet_points))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.type,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.id_members = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.media_x, _x.media_y, _x.sd_x, _x.sd_y, _x.angle,) = _struct_5f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.meet_points = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.type))
      _x = self.id_members
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5f.pack(_x.media_x, _x.media_y, _x.sd_x, _x.sd_y, _x.angle))
      length = len(self.meet_points)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.meet_points.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.type,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.id_members = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.media_x, _x.media_y, _x.sd_x, _x.sd_y, _x.angle,) = _struct_5f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.meet_points = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_5f = struct.Struct("<5f")
_struct_B = struct.Struct("<B")
