<!-- Used to run the demo of icscs12  -->
<!-- Simulation for RiskRRT experiments using the kinect simulated to be on the wheelchair pointing to the user  -->
<!-- author: Arturo -->
<!-- usage: The kinect should be connected to the computer -->
<!-- scenario:=xxxx to change the scenario -->
<!-- each scenario has a folder inside world folder, and it must have -->
<!-- the following files: map.yaml, image.pgm, scenario.world and social_filter.launch -->

<!-- usage: move_base:=0 to use RiskRRT own executor instead of move_base's -->


<launch>
  <arg name="scenario" default="hall_inria" />
  <arg name="move_base" default="1" />
  <arg name="log" default="" />
  <param name="/use_sim_time" value="true" />  

  <!-- Publish our map --> 
  <node pkg="map_server" type="map_server" name="map_server" output="screen" args="$(find wheelchairconf)/world/$(arg scenario)/map.yaml" respawn="false" >
    <param name="frame_id" value="/map" />
  </node>
 
  <!-- Start stage -->
  <node pkg="stage" type="stageros" name="stageros" args="$(find wheelchairconf)/world/$(arg scenario)/scenario.world" respawn="false" output="screen">
    <param name="base_watchdog_timeout" value="0.2"/>
  </node>

  <!-- BEGIN ROBOT 0 = WHEELCHAIR -->
  <group ns="robot_0">
    <param name="tf_prefix" value="robot_0" />

    <!-- initialize amcl -->
    <include file="$(find wheelchair)/launch/amcl.launch"/>
    
    <!-- Social Filter  -->
    <include file="$(find wheelchairconf)/world/$(arg scenario)/social_filter.launch"/>
    
    <node pkg="RiskRRT" type="rosplanner_static" name="rosplanner_static" args="$(find RiskRRT)/planning.config $(find RiskRRT)/wheelchair.config  $(arg log)" output="screen" />

    ### ROS move_base  
    <group if="$(arg move_base)">
      <node pkg="move_base" type="move_base" respawn="false" name="move_base_node" output="screen">
        <remap from="map" to="/map" />        
        <remap from="/robot_0/move_base_simple/goal" to="/robot_0/move_base_simple/next_pose"/> ## this is the riskrrt nodes
        <param name="base_global_planner" value="goal_passer/GoalPasser"/>
        <param name="controller_frequency" value="10.0" />
        <rosparam file="$(find wheelchair)/move_base_config/sim_costmap_common_params.yaml" command="load" ns="global_costmap" />
        <rosparam file="$(find wheelchair)/move_base_config/sim_costmap_common_params.yaml" command="load" ns="local_costmap" />
        <rosparam file="$(find wheelchair)/move_base_config/local_costmap_params.yaml" command="load" />
        <rosparam file="$(find wheelchair)/move_base_config/global_costmap_params.yaml" command="load" />
        <rosparam file="$(find wheelchair)/move_base_config/base_local_planner_params.yaml" command="load" />
      </node>
    </group>
    
    ### RiskRRT home-made executor  
    <group unless="$(arg move_base)">
      <node pkg="RiskRRT" type="rosexecWheelchair" name="rosexecWheelchair" args="$(find RiskRRT)/planning.config $(find RiskRRT)/wheelchair.config  $(find RiskRRT)/test.txt" output="screen" respawn="true"/>
    </group>

    

  </group>
  <!-- END ROBOT 0 -->

  

  

   	#### Launch Kinect Stuff ####
   	<!-- uncoment to use the kinect -->
  	<node pkg="openni_tracker" type="openni_tracker" name="openni_tracker" output="screen" />

  	
    ######## Publish an static Transformation to relate the robot and the kinect ######
    <node pkg="tf" type="static_transform_publisher" name="link1_broadcaster" args="1.2 0 0.5 0 0 3.1416 0 robot_0/base_link /openni_camera 100" />

 

    <node pkg="rviz" type="rviz" name="rviz" args="-d $(find wheelchairconf)/config/rviz/sim_kinect.vcg" />



     



</launch>
