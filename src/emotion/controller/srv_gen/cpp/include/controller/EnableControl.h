/* Auto-generated by genmsg_cpp for file /home/arturo/ros_works/pal/pal-ros-pkg/controller/srv/EnableControl.srv */
#ifndef CONTROLLER_SERVICE_ENABLECONTROL_H
#define CONTROLLER_SERVICE_ENABLECONTROL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace controller
{
template <class ContainerAllocator>
struct EnableControlRequest_ {
  typedef EnableControlRequest_<ContainerAllocator> Type;

  EnableControlRequest_()
  : enabled(false)
  {
  }

  EnableControlRequest_(const ContainerAllocator& _alloc)
  : enabled(false)
  {
  }

  typedef uint8_t _enabled_type;
  uint8_t enabled;


  typedef boost::shared_ptr< ::controller::EnableControlRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::controller::EnableControlRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct EnableControlRequest
typedef  ::controller::EnableControlRequest_<std::allocator<void> > EnableControlRequest;

typedef boost::shared_ptr< ::controller::EnableControlRequest> EnableControlRequestPtr;
typedef boost::shared_ptr< ::controller::EnableControlRequest const> EnableControlRequestConstPtr;



template <class ContainerAllocator>
struct EnableControlResponse_ {
  typedef EnableControlResponse_<ContainerAllocator> Type;

  EnableControlResponse_()
  : success(false)
  {
  }

  EnableControlResponse_(const ContainerAllocator& _alloc)
  : success(false)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;


  typedef boost::shared_ptr< ::controller::EnableControlResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::controller::EnableControlResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct EnableControlResponse
typedef  ::controller::EnableControlResponse_<std::allocator<void> > EnableControlResponse;

typedef boost::shared_ptr< ::controller::EnableControlResponse> EnableControlResponsePtr;
typedef boost::shared_ptr< ::controller::EnableControlResponse const> EnableControlResponseConstPtr;


struct EnableControl
{

typedef EnableControlRequest Request;
typedef EnableControlResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct EnableControl
} // namespace controller

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::controller::EnableControlRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::controller::EnableControlRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::controller::EnableControlRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2815464f55ab63684cc1bc38072d0b9b";
  }

  static const char* value(const  ::controller::EnableControlRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2815464f55ab6368ULL;
  static const uint64_t static_value2 = 0x4cc1bc38072d0b9bULL;
};

template<class ContainerAllocator>
struct DataType< ::controller::EnableControlRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "controller/EnableControlRequest";
  }

  static const char* value(const  ::controller::EnableControlRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::controller::EnableControlRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool enabled\n\
\n\
";
  }

  static const char* value(const  ::controller::EnableControlRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::controller::EnableControlRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::controller::EnableControlResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::controller::EnableControlResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::controller::EnableControlResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "358e233cde0c8a8bcfea4ce193f8fc15";
  }

  static const char* value(const  ::controller::EnableControlResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x358e233cde0c8a8bULL;
  static const uint64_t static_value2 = 0xcfea4ce193f8fc15ULL;
};

template<class ContainerAllocator>
struct DataType< ::controller::EnableControlResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "controller/EnableControlResponse";
  }

  static const char* value(const  ::controller::EnableControlResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::controller::EnableControlResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
\n\
\n\
";
  }

  static const char* value(const  ::controller::EnableControlResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::controller::EnableControlResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::controller::EnableControlRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.enabled);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct EnableControlRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::controller::EnableControlResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct EnableControlResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<controller::EnableControl> {
  static const char* value() 
  {
    return "7badc0803f167fb2cf52d5b259ad3ce0";
  }

  static const char* value(const controller::EnableControl&) { return value(); } 
};

template<>
struct DataType<controller::EnableControl> {
  static const char* value() 
  {
    return "controller/EnableControl";
  }

  static const char* value(const controller::EnableControl&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<controller::EnableControlRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7badc0803f167fb2cf52d5b259ad3ce0";
  }

  static const char* value(const controller::EnableControlRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<controller::EnableControlRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "controller/EnableControl";
  }

  static const char* value(const controller::EnableControlRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<controller::EnableControlResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7badc0803f167fb2cf52d5b259ad3ce0";
  }

  static const char* value(const controller::EnableControlResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<controller::EnableControlResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "controller/EnableControl";
  }

  static const char* value(const controller::EnableControlResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // CONTROLLER_SERVICE_ENABLECONTROL_H

